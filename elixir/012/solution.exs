# Goal: Find the first triangle number to have over 500 divisors

# Triangle number = number generated by adding natural numbers, so 7th Triangle
#  number is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28

# Use Gauss trick of sum of first n numbers 1 + 2 + 3 + 4 ...+ n = n*(n+1)/2

defmodule Helpers do
  def count_divisors(num) do
    max = round(:math.sqrt(num))
    1..max
    |> Enum.filter(&(rem(num, &1) == 0))
    |> Enum.count
    |> Kernel.*(2)
  end

  def get_triangle_number(num) do
    num*(num+1)/2
  end
end

Stream.iterate(1, &(&1+1))
|> Stream.map(&(&1*(&1+1)/2))
|> Stream.map(&(round(&1)))
|> Enum.take_while(&(Helpers.count_divisors(&1) < 500))
|> Enum.with_index
|> Enum.at(-1)
|> Kernel.elem(1) #sometimes I go a bit far with the pipe operator
|> Kernel.+(2)
|> Helpers.get_triangle_number
|> Kernel.round
# |> Helpers.count_divisors
|> IO.inspect
